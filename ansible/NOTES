# ¿Qué permite esta estructura?
#   - Organizar tus hosts por grupo (por ejemplo, por entorno, propósito o batch de Vagrant).
#   - Definir variables comunes por grupo (como ansible_user o la clave SSH), lo cual evita duplicación.
#   - Poder ejecutar comandos o playbooks en grupos individuales, por ejemplo:

# En este punto el playbook aun esta vacio y los comandos lanzados son comando 'Ad-Hoc' de ansible

## ansible -i inventory.yaml all -m ping # ping a todos los servidores definidos en el inventario
## ansible -i inventory.yaml first_servers_for_learn_vagrant -m ping  # ping al grupo de servidores 'first_servers_for_learn_vagrant'
## ansible -i inventory.yaml second_servers_for_learn_vagrant -m ping # ping al grupo de servidores 'second_servers_for_learn_vagrant'
## ansible -i inventory.yaml server00 -m ping # ping al servidor 'server00' unicamente

# Vamos a explicar aqui cual el flujo de trabajo para la ejecucion de un nuevo role:

## [ Usuario ejecuta ]
##         |
##         v
## ansible-playbook first_playbook.yaml
##         |
##         v
## +--------------------------+
## |    first_playbook.yaml   |
## +--------------------------+
## | - Define "hosts: all"    |
## | - Llama a "roles: ping"  |
## +--------------------------+
##         |
##         v
## +-----------------------------+
## |   inventory.yaml            |
## +-----------------------------+
## | - Lista de hosts o grupos   |
## | - Variables de conexión     |
## |   (user, key, IP, etc.)     |
## +-----------------------------+
##         |
##         v
## +------------------------------+
## |   roles/ping/tasks/main.yaml |
## +------------------------------+
## | - Lista de tareas YAML       |
## |   (ej: usar módulo ping)     |
## +------------------------------+
##         |
##         v
## +------------------------------+
## |     Tareas ejecutadas en     |
## |   cada host del inventario   |
## +------------------------------+

# Tener presente que el inventario ya esta definido en el inventory.yaml y que ansible.cfg ya sabe donde encontrar ese inventario,
# por tanto no hay que pasar en la orden ansible-playbook el inventario.

## Que hemos subido
# Hace apt update.
# Luego instala una lista de paquetes definida en una variable local (applications).
# Este flujo refleja bien cómo funciona una tarea típica de Update & Install en Ansible para sistemas Debian/Ubuntu.

## ┌──────────────────────────────┐
## │  [Inicio second_playbook.yaml] │
## └──────────────┬───────────────┘
##                │
##                ▼
##    ┌──────────────────────────┐
##    │ Evaluar condición `when` │
##    │ ansible_os_family ==     │
##    │       "Debian"           │
##    └────────────┬─────────────┘
##                 │ (si es Debian)
##                 ▼
##    ┌─────────────────────────────┐
##    │ Actualizar índice de paquetes │
##    │       (apt update)         │
##    └────────────┬───────────────┘
##                 │
##                 ▼
##    ┌────────────────────────────────────┐
##    │ Leer variable local `applications` │
##    │ definida en la tarea actual        │
##    └────────────┬───────────────────────┘
##                 │
##                 ▼
##    ┌─────────────────────────────┐
##    │ Iterar con `loop:`          │
##    │ Cada item = un paquete      │
##    └────────────┬────────────────┘
##                 │
##                 ▼
##    ┌─────────────────────────────┐
##    │ Instalar paquete con apt    │
##    │ - name: "{{ item }}"        │
##    │ - state: present            │
##    │ - install_recommends: no    │
##    │ - autoclean: yes            │
##    └────────────┬────────────────┘
##                 │
##                 ▼
##      ┌────────────────────────┐
##      │ [Siguiente paquete...] │◄─┐
##      └────────────────────────┘  │
##                                  │
##                       [hasta completar todos]
##                                  │
##                                  ▼
##                ┌─────────────────────────────┐
##                │ Fin de la tarea "Install"   │
##                └─────────────────────────────┘